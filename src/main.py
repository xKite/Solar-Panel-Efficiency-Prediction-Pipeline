{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc108191-90b2-4d8b-99d6-68b95546ca1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sqlite3\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix, matthews_corrcoef, log_loss\n",
    "\n",
    "# Load data from SQLite\n",
    "def load_data(db_path, query):\n",
    "    conn = sqlite3.connect(db_path)\n",
    "    data = pd.read_sql_query(query, conn)\n",
    "    conn.close()\n",
    "    return data\n",
    "\n",
    "# Preprocess data\n",
    "def preprocess_data(data, features, target):\n",
    "    X = data[features]\n",
    "    y = data[target]\n",
    "\n",
    "    # Handle missing values\n",
    "    imputer = SimpleImputer(strategy='mean')\n",
    "    X_imputed = imputer.fit_transform(X)\n",
    "\n",
    "    # Standardize features\n",
    "    scaler = StandardScaler()\n",
    "    X_scaled = scaler.fit_transform(X_imputed)\n",
    "\n",
    "    # Encode categorical target\n",
    "    label_encoder = LabelEncoder()\n",
    "    y_encoded = label_encoder.fit_transform(y)\n",
    "\n",
    "    return X_scaled, y_encoded, label_encoder\n",
    "\n",
    "# Train and evaluate models\n",
    "def train_and_evaluate(models, X_train, X_test, y_train, y_test, target_names):\n",
    "    results = {}\n",
    "    for model_name, model in models.items():\n",
    "        model.fit(X_train, y_train)\n",
    "        y_pred = model.predict(X_test)\n",
    "        y_pred_proba = model.predict_proba(X_test)\n",
    "        accuracy = accuracy_score(y_test, y_pred)\n",
    "        report = classification_report(y_test, y_pred, target_names=target_names)\n",
    "        cm = confusion_matrix(y_test, y_pred)\n",
    "        mcc = matthews_corrcoef(y_test, y_pred)\n",
    "        ll = log_loss(y_test, y_pred_proba)\n",
    "\n",
    "        results[model_name] = {\n",
    "            \"accuracy\": accuracy,\n",
    "            \"report\": report,\n",
    "            \"confusion_matrix\": cm,\n",
    "            \"matthews_corrcoef\": mcc,\n",
    "            \"log_loss\": ll\n",
    "        }\n",
    "    return results\n",
    "\n",
    "# Main function\n",
    "def main():\n",
    "    db_path = 'merged_db2.sqlite'\n",
    "    query = \"SELECT * FROM merged_table\"\n",
    "    features = ['Daily Rainfall Total (mm)', 'Sunshine Duration (hrs)', 'Cloud Cover (%)']\n",
    "    target = 'Daily Solar Panel Efficiency'\n",
    "\n",
    "    data = load_data(db_path, query)\n",
    "    X_scaled, y_encoded, label_encoder = preprocess_data(data, features, target)\n",
    "    target_names = [str(cls) for cls in label_encoder.classes_]\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_encoded, test_size=0.2, random_state=42)\n",
    "\n",
    "    models = {\n",
    "        \"Random Forest\": RandomForestClassifier(random_state=42),\n",
    "        \"SVM\": SVC(kernel='linear', probability=True, random_state=42),\n",
    "        \"Gradient Boosting\": GradientBoostingClassifier(random_state=42)\n",
    "    }\n",
    "\n",
    "    results = train_and_evaluate(models, X_train, X_test, y_train, y_test, target_names)\n",
    "\n",
    "    for model_name, metrics in results.items():\n",
    "        print(f\"{model_name} Accuracy: {metrics['accuracy']:.2f}\")\n",
    "        print(f\"{model_name} Classification Report:\")\n",
    "        print(metrics['report'])\n",
    "        print(f\"{model_name} Confusion Matrix:\")\n",
    "        print(metrics['confusion_matrix'])\n",
    "        print(f\"{model_name} Matthews Correlation Coefficient: {metrics['matthews_corrcoef']:.2f}\")\n",
    "        print(f\"{model_name} Log Loss: {metrics['log_loss']:.2f}\")\n",
    "        print()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
